// Mocks generated by Mockito 5.0.15 from annotations
// in photo_booth/test/modules/presentation/home/cubit/home_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:photo_booth/modules/domain/photos/entity/photo_entity.dart'
    as _i5;
import 'package:photo_booth/modules/domain/photos/repository/photos_repository.dart'
    as _i2;
import 'package:photo_booth/modules/domain/photos/usecase/save_photo_usecase.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakePhotosRepository_0 extends _i1.Fake implements _i2.PhotosRepository {
}

/// A class which mocks [SavePhotoUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePhotoUsecase extends _i1.Mock implements _i3.SavePhotoUsecase {
  MockSavePhotoUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PhotosRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePhotosRepository_0()) as _i2.PhotosRepository);
  @override
  _i4.Future<void> call(_i5.Photo? photo) =>
      (super.noSuchMethod(Invocation.method(#call, [photo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
